#!/usr/bin/env node

const DEBUG_LABEL = 'hypersource-client'

const datStorage = require('dat-storage')
const minimist = require('minimist')
const rimraf = require('rimraf')
const debug = require('debug')(DEBUG_LABEL)
const hsurl = require('../')
const path = require('path')
const pump = require('pump')
const ram = require('random-access-memory')
const pkg = require('../package.json')
const url = require('url')
const fs = require('fs')

const { DEBUG = '' } = process.env

const argv = minimist(process.argv.slice(2), {
  string: [
    'encoding',
    'utf8',
    'input',
    'output',
    'type',
    'key',
  ],

  boolean: [
    'force',
    'live',
    'stdout',
    'sparse',
    'latest',
    'version',
    'debug',
    'help',
  ],

  alias: {
    input: 'i',
    output: 'o',
    type: 't',
    version: 'V',
    debug: 'D',
    help: 'h',
    force: 'f',
    live: 'l',
  },

  default: {
    live: false,
    type: 'hypercore',
    latest: false,
    sparse: false,
    encoding: 'binary',
  }
})

const usage = `usage: hsurl [-hDV] [options] <endpoint>
where options can be:

  -i, --input     Path to storage for input feed
  -o, --output    Path to storage for output feed
  -f, --force     Force actions like overwriting a file or directory
  -k, --key       Public key for storage feed
  -t, --type      The feed type (eg: hypercore|hyperdrive|hypertrie...) (Default: 'hypercore')
  -h, --help      Show this message
  -D, --debug     Enable debug output (DEBUG="${DEBUG_LABEL}")
  -V, --version   Show program version
      --sparse    Treat input as sparse input
      --latest    Treat input (and output) latest (only for hyperdrive|DAT)
      --stdin     Read request from stdin
      --stdout    Output response to stdout
      --encoding  Set input encoding (--stdout) (Default: 'binary')
      --utf8      Alias for '--enoding=utf8'
`

// enable 'debug()' if given from the command line are inferred from
// the `DEBUG' environment variable
if (argv.debug || /[^|,]?(hsurl)[,|$]?/.test(DEBUG)) {
  require('debug').enable(`${DEBUG},${DEBUG_LABEL}`)
  debug('Debug output is enabled')
}

if (argv.help) {
  console.log(usage)
  process.exit(0)
}

if (argv.version) {
  console.log(pkg.version)
  process.exit(0)
}

if (!argv.input) {
  argv.input = ram
}

if (!argv.output) {
  argv.output = ram
}

if (argv.utf8) {
  argv.encoding = 'utf8'
}

if ('string' === typeof argv.output) {
  try {
    fs.accessSync(argv.output)
    if (!argv.force) {
      console.error('error:', 'Cannot overwrite output directory:', argv.output)
      input.close()
      process.exit(1)
    } else {
      try {
        rimraf.sync(argv.output)
      } catch (err) {
        debug(err)
        console.error('error:',
          'Cannot remove existing output directory:', argv.output)
        input.close()
        process.exit(1)
      }
    }
  } catch (err) {
  }
}

try {
  const stat = fs.statSync(path.join(argv.input, '.dat'))
  if (stat.isDirectory()) {
    argv.type = 'hyperdrive'
    argv.input = datStorage(argv.input)
    argv.output = datStorage(argv.output)
    argv.latest = true
  }
} catch (err) {
  debug(err)
}

if ('hyperdrive' !== argv.type) {
  try {
    const content = fs.statSync(path.join(argv.input, 'content'))
    const metadata = fs.statSync(path.join(argv.input, 'metadata'))
    if (content.isDirectory() && metadata.isDirectory()) {
      argv.type = 'hyperdrive'
    }
  } catch (err) {
    debug(err)
  }
}

try {
  const { protocol, pathname } = url.parse(argv.input)
  if ('dat:' === protocol && 64 === pathname.length) {
    argv.type = 'hyperdrive'
    argv.input = datStorage(pathname)
  }

} catch (err) {
  debug(err)
}

try {
  const { protocol, pathname } = url.parse(argv.output)
  if ('dat:' === protocol && 64 === pathname.length) {
    argv.output = datStorage(pathname)
  }

} catch (err) {
  debug(err)
}

const [ endpoint ] = argv._
const input = require(argv.type)(argv.input, argv.key, {
  sparse: argv.sparse,
  latest: argv.latest,
})

let client = null
if ('function' === typeof input.ready) {
  input.ready(onready)
} else {
  input.on('ready', onready)
}

if ('hypercore' === argv.type && ram === argv.input && ram === argv.output) {
  argv.stdout = true
}

function update(hyper, cb) {
  switch (argv.type) {
    case 'hypercore': return hyper.update(cb)
    case 'hypertrie': return hyper.feed.update(cb)
    case 'hyperdb': return process.nextTick(cb)
  }

  if ('function' === typeof hyper.update) {
    return hyper.update(cb)
  }

  if (hyper.feed && 'function' === typeof hyper.feed.update) {
    return hyper.feed.update(cb)
  }

  return hyper.on('update', cb)
}

function sync(hyper, cb) {
  switch (argv.type) {
    case 'hypercore': return hyper.on('sync', cb)
    case 'hypertrie': return hyper.feed.on('sync', cb)
    case 'hyperdb': return process.nextTick(() => hyper.ready(cb))
  }

  let syncing = false
  hyper.once('content', oncontent)
  hyper.once('syncing', onsyncing)
  hyper.once('sync', onsync)

  if ('hyperdrive' === argv.type) {
    hyper.download('/', onsync)
  }

  function onsync() {
    hyper.removeListener('content', oncontent)
    hyper.removeListener('sync', onsync)
    cb()
  }

  function onsyncing() {
    syncing = true
  }

  function oncontent() {
    if (!syncing) {
      hyper.removeListener('syncing', onsync)
      hyper.removeListener('sync', onsync)
      process.nextTick(onsync)
    }
  }
}

function onready() {
  if ('hypercore' === argv.type) {
    if (true !== process.stdin.isTTY || argv._.includes('-')) {
      process.stdin.setEncoding(argv.encoding)
      process.stdin.pipe(input.createWriteStream({ live: true }))
    }
  }

  client = hsurl(input, endpoint)
  client.connect(onconnect)
}

function onconnect(err, res, req, socket) {
  let output = null

  if (err) {
    console.error('error:', err.message)
    debug(err)
    client.close()
    return process.nextTick(process.exit, 1)
  }

  client.once('close', onclose)

  update(res, onupdate)

  function onclose() {
    process.nextTick(process.exit, 0)
  }

  function onupdate() {
    output = require(argv.type)(argv.output, res.key, {
      latest: argv.latest,
    })

    output.ready(() => {
      replicate(res, output, onreplicate)
      sync(output, onsync)
    })
  }

  function onreplicate(err) {
    if (err) {
      console.error('error:', err.message)
      debug(err)
      client.close()
      return process.nextTick(process.exit, 1)
    }

    if (!argv.live) {
      client.close()
    }
  }

  function onsync() {
    if ('hypercore' === argv.type) {
      if (true !== process.stdout.isTTY || argv.stdout) {
        const stream = output.createReadStream({ live: argv.live })
        stream.on('end', () => client.close())
        stream.on('data', (data) => {
          if (data && !Buffer.isBuffer(data) && 'object' === typeof data) {
            console.log(data)
          } else {
            process.stdout.write(data)
          }
        })
        return
      }
    }
  }
}

function replicate(src, dst, cb) {
  const alice = src.replicate({ live: argv.live })
  const bob = dst.replicate({ live: argv.live })
  return pump(alice, bob, alice, cb)
}
